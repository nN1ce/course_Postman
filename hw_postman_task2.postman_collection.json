{
	"info": {
		"_postman_id": "42beb667-84fa-4ced-82c9-9756d83bda39",
		"name": "hw_postman_task2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15319092"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Проверка на статус-код 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"В body приходит правильный string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}\\first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"var resp = pm.response.json();\r",
							"\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Req_name_Resp_name_Check_Manual\", function () {\r",
							"    pm.expect(resp.name).to.eql(\"Evgen\");\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Resp.age = Req.age Check_Manual\", function () {\r",
							"    pm.expect(+resp.age).to.eql(32);\r",
							"});\r",
							"\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Resp.salary = Req.salary Check_Manual\", function () {\r",
							"    pm.expect(resp.salary).to.eql(7000);\r",
							"});\r",
							"\r",
							"//7.Спарсить request.\r",
							"var req = request.data;\r",
							"\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test('Req_name_Resp_name_Check_Auto', function () {\r",
							"    pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test('Req_age_Resp_age_Check_Auto', function () {\r",
							"    pm.expect(resp.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Req_salary_Resp_salary_Check_Auto\", function () {\r",
							"    pm.expect(+req.salary).to.eql(resp.salary);\r",
							"});\r",
							"\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log(resp.family);\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Resp_salary_Req_salary*4_Check\", function () {\r",
							"    pm.expect(resp.family.u_salary_1_5_year).to.eql(req.salary * 4);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Evgen",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "7000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"var resp = pm.response.json();\r",
							"\r",
							"//4. Спарсить request.\r",
							"var req_url = pm.request.url.query.toObject();\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"resp_name = req_name_Check_Auto\", function () {\r",
							"    pm.expect(resp.name).to.eql(req_url.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"resp_age = req_age_Check_Auto\", function () {\r",
							"    pm.expect(resp.age).to.eql(req_url.age);\r",
							"});\r",
							"\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"resp_salary = req_salary_Check_Auto\", function () {\r",
							"    pm.expect(resp.salary).to.eql(+req_url.salary);\r",
							"});\r",
							"\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log(resp.family);\r",
							"\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"dog have name Check\", function () {\r",
							"    pm.expect(resp.family.pets.dog).to.have.property('name');\r",
							"});\r",
							"\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"dog have age Check\", function () {\r",
							"    pm.expect(resp.family.pets.dog).to.have.property('age');\r",
							"});\r",
							"\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"name = Luky Check\", function () {\r",
							"    pm.expect(resp.family.pets.dog.name).to.eql('Luky');\r",
							"});\r",
							"\r",
							"//12. Проверить, что параметр age имеет значение 4\r",
							"pm.test(\"age = 4 Check\", function () {\r",
							"    pm.expect(resp.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": []
				},
				"url": {
					"raw": "{{url}}/object_info_3?name=Evgen&age=32&salary=7000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Evgen"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "7000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Отправить запрос.\r",
							"// 1. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2. Спарсить response body в json.\r",
							"var resp = pm.response.json();\r",
							"\r",
							"// 3. Спарсить request.\r",
							"var req = pm.request.url.query.toObject();\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"resp_name = resp_name Check\", function () {\r",
							"    pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"// 5. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"resp.age = req.age Check\", function () {\r",
							"    pm.expect(resp.age).to.eql(+req.age);\r",
							"});\r",
							"// 6. Вывести в консоль параметр salary из request.\r",
							"console.log(req.salary);\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из response.\r",
							"console.log(resp.salary);\r",
							"\r",
							"// 8. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(resp.salary[0]);\r",
							"\r",
							"// 9. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp.salary[1]);\r",
							"\r",
							"// 10. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp.salary[2]);\r",
							"\r",
							"// 11. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"resp.salary[0] = req.salary\", function () {\r",
							"    pm.expect(resp.salary[0]).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// 12. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"resp.salary[1] = req.slasry * 2\", function (){\r",
							"    pm.expect(+resp.salary[1]).to.eql(req.salary * 2);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"resp.salary[2] = req.salary * 3\", function (){\r",
							"    pm.expect(+resp.salary[2]).to.eql(req.salary * 3);\r",
							"});\r",
							"\r",
							"// 14. Создать в окружении переменную name\r",
							"// 15. Создать в окружении переменную age\r",
							"// 16. Создать в окружении переменную salary\r",
							"// 17. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", resp.name);\r",
							"\r",
							"// 18. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", resp.age);\r",
							"\r",
							"// 19. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", resp.salary [0]);\r",
							"\r",
							"// 20. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (let i = 0; i <= resp.salary.length -1; i++) {\r",
							"\tconsole.log(resp.salary[i]);\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Evgen&age=32&salary=7000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Evgen"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "7000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Вставить параметр salary из окружения в request\r",
							"//2. Вставить параметр age из окружения в age\r",
							"//3. Вставить параметр name из окружения в name\r",
							"//4. Отправить запрос.\r",
							"//5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//6. Спарсить response body в json.\r",
							"var resp = pm.response.json();\r",
							"\r",
							"//7. Спарсить request.\r",
							"var req = request.data;\r",
							"\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"resp have start_qa_salary\", function () {\r",
							"    pm.expect(resp).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"resp have qa_salary_after_6_months\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"resp have qa_salary_after_12_months\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"resp have qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"resp have qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"resp have person\", function () {\r",
							"    pm.expect(resp).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary = req.salary\", function () {\r",
							"    pm.expect(resp.start_qa_salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"resp.qa_salary_after_6 = req.salary * 2\", function () {\r",
							"    pm.expect(resp.qa_salary_after_6_months).to.eql(req.salary * 2);\r",
							"});\r",
							"\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months = salary * 2.7\", function () {\r",
							"    pm.expect(resp.qa_salary_after_12_months).to.eql(req.salary * 2.7);\r",
							"});\r",
							"\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year = salary * 3.3\", function () {\r",
							"    pm.expect(resp['qa_salary_after_1.5_year']).to.eql(req.salary * 3.3);\r",
							"});\r",
							"\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years = salary * 3.8\", function () {\r",
							"    pm.expect(resp['qa_salary_after_3.5_years']).to.eql(req.salary * 3.8);\r",
							"});\r",
							"\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"resp.person.u_name[1] = req.salary\", function () {\r",
							"    pm.expect(resp.person.u_name[1]).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"resp.person.u_age = req.age\", function () {\r",
							"    pm.expect(resp.person.u_age).to.eql(+req.age);\r",
							"});\r",
							"\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"resp.person.u_salary_5_years = req.salary * 4.2\", function () {\r",
							"    pm.expect(resp.person.u_salary_5_years).to.eql(req.salary * 4.2);\r",
							"});\r",
							"\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"// for (let i = 0; i < Object.keys(resp.person[key].lenght; i++) {\r",
							"// \tconsole.log(resp.person[key][i]);\r",
							"// };\r",
							"for(var key in resp.person) {\r",
							"   if(typeof(resp.person[key]) == 'object'){\r",
							"       for(let i = 0; i <= Object.keys(resp.person[key]).length; i++){\r",
							"           console.log(resp.person[key][i]);\r",
							"       }\r",
							"   }\r",
							"   else if(typeof(resp.person[key]) != 'object') {\r",
							"        console.log(resp.person[key]);\r",
							"   }\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}